{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInterceptor = void 0;\n\nvar strict_event_emitter_1 = require(\"strict-event-emitter\");\n\nfunction createInterceptor(options) {\n  var observer = new strict_event_emitter_1.StrictEventEmitter();\n  var cleanupFns = [];\n  return {\n    apply: function () {\n      cleanupFns = options.modules.map(function (interceptor) {\n        return interceptor(observer, options.resolver);\n      });\n    },\n    on: function (event, listener) {\n      observer.addListener(event, listener);\n    },\n    restore: function () {\n      observer.removeAllListeners();\n\n      if (cleanupFns.length === 0) {\n        throw new Error(\"Failed to restore patched modules: no patches found. Did you forget to run \\\".apply()\\\"?\");\n      }\n\n      cleanupFns.forEach(function (restore) {\n        return restore();\n      });\n    }\n  };\n}\n\nexports.createInterceptor = createInterceptor;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAwEA,SAAgBA,iBAAhB,CAAkCC,OAAlC,EAA6D;AAC3D,MAAMC,QAAQ,GAAG,IAAIC,yCAAJ,EAAjB;AACA,MAAIC,UAAU,GAA2B,EAAzC;AAEA,SAAO;AACLC,SAAK;AACHD,gBAAU,GAAGH,OAAO,CAACK,OAAR,CAAgBC,GAAhB,CAAoB,UAACC,WAAD,EAAY;AAC3C,eAAOA,WAAW,CAACN,QAAD,EAAWD,OAAO,CAACQ,QAAnB,CAAlB;AACD,OAFY,CAAb;AAGD,KALI;AAMLC,MAAE,YAACC,KAAD,EAAQC,QAAR,EAAgB;AAChBV,cAAQ,CAACW,WAAT,CAAqBF,KAArB,EAA4BC,QAA5B;AACD,KARI;AASLE,WAAO;AACLZ,cAAQ,CAACa,kBAAT;;AAEA,UAAIX,UAAU,CAACY,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CACJ,0FADI,CAAN;AAGD;;AAEDb,gBAAU,CAACc,OAAX,CAAmB,UAACJ,OAAD,EAAQ;AAAK,sBAAO,EAAP;AAAS,OAAzC;AACD;AAnBI,GAAP;AAqBD;;AAzBDK","names":["createInterceptor","options","observer","strict_event_emitter_1","cleanupFns","apply","modules","map","interceptor","resolver","on","event","listener","addListener","restore","removeAllListeners","length","Error","forEach","exports"],"sources":["/Users/yigitzarbun/Desktop/Workintech/sprint_6/sprint6_challenge/FSWeb-S6-Challenge/node_modules/@mswjs/interceptors/src/createInterceptor.ts"],"sourcesContent":["import { IncomingMessage } from 'http'\nimport { HeadersObject, Headers } from 'headers-polyfill'\nimport { StrictEventEmitter } from 'strict-event-emitter'\n\nexport type Interceptor = (\n  observer: Observer,\n  resolver: Resolver\n) => InterceptorCleanupFn\n\nexport type Observer = StrictEventEmitter<InterceptorEventsMap>\n\n/**\n * A side-effect function to restore all the patched modules.\n */\nexport type InterceptorCleanupFn = () => void\n\nexport type RequestCredentials = 'omit' | 'include' | 'same-origin'\n\nexport interface IsomorphicRequest {\n  id: string\n  url: URL\n  method: string\n  headers: Headers\n  /**\n   * The value of the request client's \"credentials\" option\n   * or a compatible alternative (i.e. `withCredentials` for `XMLHttpRequest`).\n   * Always equals to \"omit\" in Node.js.\n   */\n  credentials: RequestCredentials\n  body?: string\n}\n\nexport interface IsomorphicResponse {\n  status: number\n  statusText: string\n  headers: Headers\n  body?: string\n}\n\nexport interface MockedResponse\n  extends Omit<Partial<IsomorphicResponse>, 'headers'> {\n  headers?: HeadersObject\n}\n\nexport interface InterceptorEventsMap {\n  request(request: IsomorphicRequest): void\n  response(request: IsomorphicRequest, response: IsomorphicResponse): void\n}\n\nexport type Resolver = (\n  request: IsomorphicRequest,\n  ref: IncomingMessage | XMLHttpRequest | Request\n) => MockedResponse | Promise<MockedResponse | void> | void\n\nexport interface InterceptorOptions {\n  modules: Interceptor[]\n  resolver: Resolver\n}\n\nexport interface InterceptorApi {\n  /**\n   * Apply necessary module patches to provision the interception of requests.\n   */\n  apply(): void\n  on<Event extends keyof InterceptorEventsMap>(\n    event: Event,\n    listener: InterceptorEventsMap[Event]\n  ): void\n  /**\n   * Restore all applied module patches and disable the interception.\n   */\n  restore(): void\n}\n\nexport function createInterceptor(options: InterceptorOptions): InterceptorApi {\n  const observer = new StrictEventEmitter<InterceptorEventsMap>()\n  let cleanupFns: InterceptorCleanupFn[] = []\n\n  return {\n    apply() {\n      cleanupFns = options.modules.map((interceptor) => {\n        return interceptor(observer, options.resolver)\n      })\n    },\n    on(event, listener) {\n      observer.addListener(event, listener)\n    },\n    restore() {\n      observer.removeAllListeners()\n\n      if (cleanupFns.length === 0) {\n        throw new Error(\n          `Failed to restore patched modules: no patches found. Did you forget to run \".apply()\"?`\n        )\n      }\n\n      cleanupFns.forEach((restore) => restore())\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"script"}